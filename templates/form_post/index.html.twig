{% extends 'base.html.twig' %}

{% block title %}FormPost Index{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="text-center mb-4">üìã FormPost Index</h1>
     {% set query = query|default('') %}


    <!-- Search Bar (Real-time filtering) -->
    <div class="row justify-content-center mb-3">
        <div class="col-md-6">
            <input type="text" id="searchInput" class="form-control" placeholder="Rechercher un post..." value="{{ query }}">
        </div>
    </div>
     <!-- Sorting Dropdown -->
    <div class="row justify-content-center mb-3">
        <div class="col-md-6">
            <select id="sortSelect" class="form-control">
                <option value="default">Trier par</option>
                <option value="name">Nom</option>
                <option value="date">Date</option>
            </select>
        </div>
    </div>

    <div class="d-flex justify-content-between mb-3">
        <a href="{{ path('app_form_post_new') }}" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New
        </a>
    </div>

    <div class="row" id="postsContainer">
        {% for form_post in pagination %}
            <div class="col-md-8 offset-md-2 mb-4 post-card" 
                 data-name="{{ form_post.nom|lower }}" 
                 data-description="{{ form_post.description|lower }}">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">{{ form_post.nom }}</h5>
                        <h6 class="text-muted">Ajout√© √† la date : {{ form_post.date ? form_post.date|date('Y-m-d H:i:s') : 'N/A' }}</h6>
                        <p class="card-text">{{ form_post.description }}</p>
                        <div class="d-flex">
                            <a href="{{ path('app_form_post_edit', {'id': form_post.id}) }}" class="text-warning me-3">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="#" class="text-danger delete-btn me-3" 
                               data-url="{{ path('app_form_post_delete', {'id': form_post.id}) }}"
                               data-token="{{ csrf_token('delete' ~ form_post.id) }}">
                                <i class="fas fa-trash-alt"></i>
                            </a>
                            <a href="#" class="text-secondary comment-btn" data-id="{{ form_post.id }}">
                                <i class="fas fa-comment"></i> (<span id="comment-count-{{ form_post.id }}">{{ form_post.reponses|length }}</span>)
                            </a>
                        </div>
                        <button class="like-btn" data-id="{{ form_post.id }}">
                        üëç <span class="like-count">{{ form_post.likes|length }}</span>
                        </button>

                        <button class="dislike-btn" data-id="{{ form_post.id }}">
                        üëé <span class="dislike-count">{{ form_post.dislikes|length }}</span>
                        </button>
                        <!-- Comment Section -->
                        <div class="comments-section mt-3" id="comments-{{ form_post.id }}" style="display: none;">
                            <h6>Commentaires (<span id="comment-count-section-{{ form_post.id }}">{{ form_post.reponses|length }}</span>)</h6>
                            <div class="comments-list" id="comments-list-{{ form_post.id }}">
                                {% for reponse in form_post.reponses %}
                                    <div class="comment bg-light p-2 rounded mb-2">{{ reponse.contenu }}</div>
                                {% endfor %}
                            </div>
                            <textarea class="form-control mb-2 comment-text" placeholder="Ajoutez un commentaire..."></textarea>
                            <a href="{{ path('app_reponse_new', {'formPostId': form_post.id}) }}" class="btn btn-sm btn-primary">
    Ajouter un commentaire
</a>

                        </div>
                    </div>
                </div>
            </div>
        {% else %}
            <div class="col-md-8 offset-md-2">
                <p class="text-muted text-center">Aucun enregistrement trouv√©.</p>
            </div>
        {% endfor %}
    </div>
</div>
<!-- Pagination -->
<div class="d-flex justify-content-center mt-4">
    {{ knp_pagination_render(pagination) }}
</div>

<!-- SweetAlert for delete confirmation -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    // DELETE POST CONFIRMATION
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function (e) {
            e.preventDefault();
            let url = this.getAttribute('data-url');
            let token = this.getAttribute('data-token');

            Swal.fire({
                title: "√ätes-vous s√ªr ?",
                text: "Cette action est irr√©versible !",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Oui, supprimer !"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(url, {
                        method: "POST",
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: new URLSearchParams({ _token: token })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire("Supprim√© !", "L'√©l√©ment a √©t√© supprim√©.", "success")
                                .then(() => location.reload());
                        } else {
                            Swal.fire("Erreur", "Impossible de supprimer.", "error");
                        }
                    })
                    .catch(() => Swal.fire("Erreur", "Une erreur est survenue.", "error"));
                }
            });
        });
    });

    // TOGGLE COMMENT SECTION
    document.querySelectorAll('.comment-btn').forEach(button => {
        button.addEventListener('click', function (e) {
            e.preventDefault();
            let postId = this.getAttribute('data-id');
            let commentSection = document.getElementById('comments-' + postId);
            commentSection.style.display = commentSection.style.display === 'none' ? 'block' : 'none';
        });
    });
    
    

    // REAL-TIME SEARCH FILTER
    const searchInput = document.getElementById("searchInput");
    const posts = document.querySelectorAll(".post-card");

    searchInput.addEventListener("input", function () {
        let query = searchInput.value.toLowerCase();

        posts.forEach(post => {
            let name = post.getAttribute("data-name");
            let description = post.getAttribute("data-description");

            if (name.includes(query) || description.includes(query)) {
                post.style.display = "block"; // Show post
            } else {
                post.style.display = "none"; // Hide post
            }
        });
    });
    // SORTING FUNCTIONALITY
    sortSelect.addEventListener("change", function () {
        let sortBy = sortSelect.value;
        let sortedPosts = Array.from(posts);

        if (sortBy === "name") {
            sortedPosts.sort((a, b) => a.getAttribute("data-name").localeCompare(b.getAttribute("data-name")));
        } else if (sortBy === "date") {
            sortedPosts.sort((a, b) => new Date(b.getAttribute("data-date")) - new Date(a.getAttribute("data-date")));
        }

        sortedPosts.forEach(post => postsContainer.appendChild(post));
    });
});

</script>
<script>
document.querySelectorAll('.like-btn, .dislike-btn').forEach(button => {
    button.addEventListener('click', function () {
        const postId = this.getAttribute('data-id');
        const reaction = this.classList.contains('like-btn') ? 'like' : 'dislike';

        const url = `/form/post/${postId}/react`;
        console.log("Requesting:", url);

        fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ reaction })
        })
        .then(response => response.json())
        .then(data => {
            document.querySelector(`.like-btn[data-id='${postId}'] .like-count`).innerText = data.likes;
            document.querySelector(`.dislike-btn[data-id='${postId}'] .dislike-count`).innerText = data.dislikes;
        });
    });
});

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const badWords = ["merde", "fuck", "putain"]; // Ajoute d'autres mots si besoin
        const descriptionInput = document.getElementById("post_description");
        const form = document.getElementById("form_post"); // Assure-toi que c'est l'ID correct de ton formulaire
        const warningMessage = document.createElement("p");
        warningMessage.style.color = "red";
        warningMessage.style.display = "none";
        warningMessage.innerText = "Votre description contient des mots interdits !";
        descriptionInput.parentNode.appendChild(warningMessage);

        form.addEventListener("submit", function (event) {
            let descriptionText = descriptionInput.value.toLowerCase();
            let containsBadWord = badWords.some(word => descriptionText.includes(word));

            if (containsBadWord) {
                warningMessage.style.display = "block";
                event.preventDefault(); // Bloquer la soumission du formulaire
            } else {
                warningMessage.style.display = "none";
            }
        });
    });
</script>


{% endblock %}
